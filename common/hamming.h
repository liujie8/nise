#ifndef _COMMON_HAMMING
#define _COMMON_HAMMING

#include <string.h>

#include "config.h"

//#include <smmintrin.h>

namespace nise
{
/*
	typedef unsigned char Chunk; // could be unsigned short or unsigned.

	static const unsigned CHUNK_BIT = sizeof(Chunk) * 8;
	static const unsigned DATA_CHUNK = 32 / CHUNK_BIT;
	static const unsigned DATA_SIZE = DATA_CHUNK * sizeof(Chunk);

*/
	class Hamming
	{
                unsigned char_bit_cnt[257];

	public:
		Hamming()
                {
			unsigned bit_cnt[]= {
                                0x0,0x1,0x1,0x2,0x1,0x2,0x2,0x3,0x1,0x2,0x2,0x3,0x2,0x3,0x3,0x4,
                                0x1,0x2,0x2,0x3,0x2,0x3,0x3,0x4,0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,
                                0x1,0x2,0x2,0x3,0x2,0x3,0x3,0x4,0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,
                                0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,
                                0x1,0x2,0x2,0x3,0x2,0x3,0x3,0x4,0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,
                                0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,
                                0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,
                                0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,0x4,0x5,0x5,0x6,0x5,0x6,0x6,0x7,
                                0x1,0x2,0x2,0x3,0x2,0x3,0x3,0x4,0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,
                                0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,
                                0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,
                                0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,0x4,0x5,0x5,0x6,0x5,0x6,0x6,0x7,
                                0x2,0x3,0x3,0x4,0x3,0x4,0x4,0x5,0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,
                                0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,0x4,0x5,0x5,0x6,0x5,0x6,0x6,0x7,
                                0x3,0x4,0x4,0x5,0x4,0x5,0x5,0x6,0x4,0x5,0x5,0x6,0x5,0x6,0x6,0x7,
                                0x4,0x5,0x5,0x6,0x5,0x6,0x6,0x7,0x5,0x6,0x6,0x7,0x6,0x7,0x7,0x8,
                                0};
			memcpy(char_bit_cnt, bit_cnt, sizeof(unsigned)*257);
		};
                ~Hamming()
                {};

		typedef unsigned long long u64;
		typedef unsigned int       u32;

		inline u32 popcount64_1(u64 x) { return __builtin_popcountll(x); }; //gcc built in

		unsigned int popcount(unsigned long long * first, unsigned long long * second)
		{
			unsigned int dist =0;
			unsigned long long c =0;
			for(int i=0;i < 2;i++)
			{
				c = first[i] ^ second[i];
				dist += popcount64_1(c);
			}
			return dist;
		};

		inline u32 popcount64_2(u64 x)
		{
			u32 y;

			x = (x & 0x5555555555555555ULL) + ((x >>  1) & 0x5555555555555555ULL);
			x = (x & 0x3333333333333333ULL) + ((x >>  2) & 0x3333333333333333ULL);
			x = (x & 0x0F0F0F0F0F0F0F0FULL) + ((x >>  4) & 0x0F0F0F0F0F0F0F0FULL);
			x = (x & 0x000F000F000F000FULL) + ((x >>  8) & 0x000F000F000F000FULL);
			x = (x & 0x0000001F0000001FULL) + ((x >> 16) & 0x0000001F0000001FULL);
			y = (x & 0x000000000000003F   ) + ((x >> 32) & 0x000000000000003F   );
			return y;
		};


                unsigned int popcnt(unsigned long long * first, unsigned long long * second)
                {
                        unsigned int dist =0;
                        unsigned long long c =0;
                        for(int i=0;i < 2;i++)
                        {
                                c = first[i] ^ second[i];
                                dist += popcount64_3(c);
                        }
                        return dist;
                };

		inline u32 popcount64_3(u64 x)
		{
			x = (x & 0x5555555555555555ULL) + ((x >>  1) & 0x5555555555555555ULL);
			x = (x & 0x3333333333333333ULL) + ((x >>  2) & 0x3333333333333333ULL);
			x = (x & 0x0F0F0F0F0F0F0F0FULL) + ((x >>  4) & 0x0F0F0F0F0F0F0F0FULL);
			return (x * 0x0101010101010101ULL) >> 56;
		};

		inline u32 popcount64_4(u64 x)
		{
			x = (x & 0x5555555555555555ULL) + ((x >>  1) & 0x5555555555555555ULL);
			x = (x & 0x3333333333333333ULL) + ((x >>  2) & 0x3333333333333333ULL);
			x = (x & 0x0F0F0F0F0F0F0F0FULL) + ((x >>  4) & 0x0F0F0F0F0F0F0F0FULL);
			return (((u32)(x >> 32)) * 0x01010101 >> 24) + 
				(((u32)(x      )) * 0x01010101 >> 24);
		};
/*
		inline unsigned int popcnt_64(unsigned long long x)
		{
			return  _mm_popcnt_u64(x);  //instruction support gcc -Wall -m64 -msse4.2 popcnt.c -o popcnt
		};

		template <typename T>
			inlinde unsigned int popcnt_128(T v)
			{
				unsigned int c;

				v = v - ((v >> 1) & (T)~(T)0/3);                           // temp
				v = (v & (T)~(T)0/15*3) + ((v >> 2) & (T)~(T)0/15*3);      // temp
				v = (v + (v >> 4)) & (T)~(T)0/255*15;                      // temp
				c = (T)(v * ((T)~(T)0/255)) >> (sizeof(T) - 1) * CHAR_BIT; // count
				return c;
			};		
*/
		template <typename B>
			unsigned __hamming (B a, B b)
			{
				B c = a ^ b;

				unsigned char *p = reinterpret_cast<unsigned char *>(&c);
				unsigned r = 0;
				for (unsigned i = 0; i < sizeof(B); i++)
				{
					r += char_bit_cnt[*p++];
				}
				return r;
			};

		float operator () (const Chunk *first1, const Chunk *first2) 
		{
			unsigned r = 0;
			for (unsigned i = 0; i < DATA_CHUNK; ++i)
			{
				r += __hamming(first1[i], first2[i]);
			}
			return float(r);
		};
	};
}

#endif
